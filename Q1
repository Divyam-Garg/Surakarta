from reference import get_board_state, get_board_string
from math import sqrt

def make_move_normal(board_string, start, end):
    '''Takes in 3 inputs, the string representation of the current game 
       board(str) and start and end coordinates(tuple) of the move. A valid
       move is if the end coordinate is adjacent to the start coordinate on the
       game board and the start coordinate is not empty and the end coordinate 
       is empty. Returns None if move is invalid. Returns string representation
       of new board state if move is valid'''
    
    #board dimensions should be 4x4 or 16x16
    if not(len(board_string) == 16 or len(board_string) == 36):
        return None
    
    size = sqrt(len(board_string))  #'size' stores dimensions of board
    
    endx = end[0]
    endy = end[1]
    stx = start[0]
    sty = start[1]
    
    #'start' and 'end' coordinates should be inside given board
    for i in [endx, endy, stx, sty]:
        if not(0 <= i <= (size - 1)):
            return None
        
    board = get_board_state(board_string)
    
    #board should be empty at 'end' and non-empty at 'start'
    if (board[endx][endy] != '.') or (board[stx][sty] == '.'):
        return None
    
    #'end' should be adjacent to 'start
    adjacent = False
    for x in range(-1, 2):
        for y in range(-1, 2):
            if (start[0]+x, start[1]+y) == end:
                adjacent = True            
    
    if not adjacent:
        return None
    #if 'end' and 'start' adjacent, move piece at 'start' to 'end' and replace
    #'start' with empty position
    else:
        board[end[0]][end[1]] = board[start[0]][start[1]]
        board[start[0]][start[1]] = '.'
        return get_board_string(board)
    
    
if __name__ == '__main__':
    # Run the examples from the question.
    print(make_move_normal('xxxx........oooo', (0, 0), (0, 1)))
    print(make_move_normal('xxxx........oooo', (0, 0), (2, 2)))
